# -*- coding: utf-8 -*-
"""2602070566_OOP2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x7EKseqEEnkcAM8eiCcmCbugaLf0vnJq
"""

import pandas as pd
from sklearn.preprocessing import RobustScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import pickle


class DataHandler:
    def __init__(self, file_path):
        self.file_path = file_path
        self.df = None
        self.input_df = None
        self.output_df = None

    def load_data(self):
        self.df = pd.read_csv(self.file_path)

    def create_input_output(self, target_column):
        self.output_df = self.df[target_column]
        self.input_df = self.df.drop(target_column, axis = 1)

    def drop_column(self):
      self.df.drop(['Unnamed: 0', 'id', 'CustomerId', 'Surname'], axis=1, inplace=True)


class ModelHandler:
    def __init__(self, input_data, output_data):
        self.input_data = input_data
        self.output_data = output_data
        self.createModel()
        self.x_train, self.x_test, self.y_train, self.y_test, self.y_predict = [None] * 5

    def imputeNACreditScore(self):
        median = self.x_train['CreditScore'].median()
        self.x_train['CreditScore'].fillna(median, inplace=True)
        self.x_test['CreditScore'].fillna(median, inplace=True)

    def genderEncode(self):
        encode_gender = {"Gender": {"Male":1,"Female" :0}}
        self.x_train = self.x_train.replace(encode_gender)
        self.x_test = self.x_test.replace(encode_gender)

        filename = 'gender_encode.pkl'
        pickle.dump(encode_gender, open(filename, 'wb'))

    def geographyEncode(self):
        encode_geography = {'Geography': {"France":0, "Spain":1, "Germany":2}}
        self.x_train = self.x_train.replace(encode_geography)
        self.x_test = self.x_test.replace(encode_geography)

        filename = 'geography_encode.pkl'
        pickle.dump(encode_geography, open(filename, 'wb'))

    def scale_data(self):
        scaler = RobustScaler()
        scale_cols = ['CreditScore', 'Age', 'Tenure', 'Balance', 'NumOfProducts', 'EstimatedSalary']
        self.x_train[scale_cols] = scaler.fit_transform(self.x_train[scale_cols])
        self.x_test[scale_cols] = scaler.transform(self.x_test[scale_cols])

        filename = 'robust_scaler.pkl'
        pickle.dump(scaler, open(filename, 'wb'))

    def createModel(self):
         self.model = RandomForestClassifier(n_estimators=100,max_depth=10)

    def makePrediction(self):
        self.y_predict = self.model.predict(self.x_test)

    def createReport(self):
        print('\nClassification Report\n')
        print(classification_report(self.y_test, self.y_predict, target_names=['0','1']))

    def split_data(self, test_size=0.2, random_state=42):
        self.x_train, self.x_test, self.y_train, self.y_test = train_test_split(self.input_data, self.output_data, test_size=test_size, random_state=random_state)

    def train_model(self):
        self.model.fit(self.x_train, self.y_train)

    def evaluate_model(self):
        predictions = self.model.predict(self.x_test)
        return accuracy_score(self.y_test, predictions)

    def save_model_to_file(self, filename):
        with open(filename, 'wb') as file:  # Open the file in write-binary mode
            pickle.dump(self.model, file)  # Use pickle to write the model to the file

file_path = '/content/data_D.csv'
data_handler = DataHandler(file_path)
data_handler.load_data()
data_handler.drop_column()
data_handler.create_input_output('churn')
input_df = data_handler.input_df
output_df = data_handler.output_df


model_handler = ModelHandler(input_df, output_df)
model_handler.split_data()
model_handler.imputeNACreditScore()
model_handler.genderEncode()
model_handler.geographyEncode()
model_handler.scale_data()


model_handler.train_model()
model_handler.makePrediction()

model_handler.save_model_to_file('trained_model.pkl')


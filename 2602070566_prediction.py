# -*- coding: utf-8 -*-
"""2602070566_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XYfCj6mE75kdDC-ItO8YbyUvYm6_tDQB
"""

import streamlit as st
import joblib
import numpy as np
import pandas as pd
from sklearn.preprocessing import RobustScaler

model = joblib.load('trained_model.pkl')
gender_encode = joblib.load('gender_encode.pkl')
geography_encode = joblib.load('geography_encode.pkl')
robust_scaler = joblib.load('robust_scaler.pkl')

def main():
    st.title('Churn Model Deployment')

    #input components
    credit_score = st.number_input("Credit Score", 0, 1000)
    age = st.number_input("Age", 0, 100)
    gender = st.radio("Gender", ["Male", "Female"])
    tenure = st.number_input("Tenure (in years)", 0 ,100)
    balance = st.number_input("Balance", 0, 1000000)
    products = st.number_input("Number of products",1 , 5)
    credit_card = st.radio("Has Credit Card", ["Yes", "No"])
    active_member = st.radio("Is Active Member", ["Yes", "No"])
    estimated_salary = st.number_input("Estimated Salary", 0, 1000000)
    geography = st.radio("Geography", ["France", "Germany", "Spain"])

    credit_card = 1 if credit_card == "Yes" else 0
    active_member = 1 if active_member == "Yes" else 0

    data = {
        'CreditScore': int(credit_score),
        'Age': int(age),
        'Gender': gender,
        'Tenure': int(tenure),
        'Balance': int(balance),
        'NumOfProducts': int(products),
        'HasCrCard': int(credit_card),
        'IsActiveMember': int(active_member),
        'EstimatedSalary': int(estimated_salary),
        'Geography' : geography
        }

    df = pd.DataFrame([list(data.values())], columns = ['CreditScore',
        'Age',
        'Gender',
        'Tenure',
        'Balance',
        'NumOfProducts',
        'HasCrCard',
        'IsActiveMember',
        'EstimatedSalary',
        'Geography'])

    df = df.replace(gender_encode)
    df = df.replace(geography_encode)

    #scaler = RobustScaler()
    #df[['CreditScore', 'Age', 'Tenure', 'Balance', 'NumOfProducts', 'EstimatedSalary']] = robust_scaler.transform(df[['CreditScore', 'Age', 'Tenure', 'Balance', 'NumOfProducts', 'EstimatedSalary']])

    if st.button('Predict Churn'):
        features = df
        result = make_prediction(features)
        st.success(f'The prediction is: {result}')

def make_prediction(features):
    input_array = np.array(features).reshape(1, -1)
    prediction = model.predict(input_array)
    return prediction[0]

if __name__ == '__main__':
    main()

